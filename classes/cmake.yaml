inherit: [cpackage, ninja, install]

buildToolsWeak: [cmake]
buildVars: [AUTOCONF_HOST, CC, CXX, PLATFORM]
buildScript: |
    # Make sure CMake finds other stuff by its own logic too
    $global:CMAKE_FIND_ROOT_PATH=""
    foreach ( $i in ($args | select -skip 1) )
    {
        $CMAKE_FIND_ROOT_PATH+="$i;"
    }

    # Because DEST_DIR is not supported on windows, we must set the path from here
    $global:CMAKE_INSTALL_PREFIX="..\install\usr"
    $global:CMAKE_INSTALL_SYSCONFDIR="..\install\etc"

    # CMake does not honor CPPFLAGS! Merge them with C(XX)FLAGS.
    if ( ${Env:CPPFLAGS} -ne $null )
    {
        ${Env:CXXFLAGS} +=" ${Env:CPPFLAGS}"
        ${Env:CPPFLAGS} = ""
    }

    $global:CMAKE_TOOLCHAIN_FILE=$null

    # Create a toolchain file if cross-compiling
    if ( $(cpackageCrossCompiling) )
    {
        $CMAKE_SYSTEM_NAME = ""
        switch -Wildcard ( "${Env:AUTOCONF_HOST}" )
        {
            '*-linux-*' { $CMAKE_SYSTEM_NAME="Linux" }
            '*-win32'   { $CMAKE_SYSTEM_NAME="Windows" }
            default     { $CMAKE_SYSTEM_NAME="Generic" }
        }

        'set(CMAKE_SYSTEM_NAME {0})
        set(CMAKE_C_COMPILER {1})
        set(CMAKE_CXX_COMPILER {2})
        set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
        set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)' -f "$CMAKE_SYSTEM_NAME", "${Env:CC}", "${Env:CXX}" | Out-File -encoding utf8 ${PWD}\toolchain.cmake

        $CMAKE_TOOLCHAIN_FILE="${PWD}/toolchain.cmake"
    }
    else
    {
        # create empty toolchain file
        '# just a placeholder'  | Out-File -encoding utf8 ${PWD}\toolchain.cmake
    }
    # The build of shared libraries can be controlled on cmake. Unfortunately
    # there is no standard switch to control static libraries.

    switch ( $(cpackageLibraryType) )
    {
        { ($PSItem -eq "shared") -or ($PSItem -eq "both") }
        {
            $global:BUILD_SHARED_LIBS="ON"
        }
        { ($PSItem -eq "static") }
        {
            $global:BUILD_SHARED_LIBS="OFF"
        }
        default
        {
            Write-Error "undefined cpackageLibraryType"
        }
    }

    # usage: cmakeBuild [-m <ninja_target>] [-o <ninja_options>]
    #                   [-n] [-i <install_component>]
    #                   <source-path> [-DCMAKE_...]
    function cmakeBuild
    {
        $MAKE_TARGETS=@( )
        $MAKE_OPTIONS=@( )
        $INSTALL="yes"
        $INSTALL_COMPONENT=""

        $processed = 0;
        for ( $i = 0; $i -lt $args.count; $i++ )
        {
            switch ( $($args[$i]) )
            {
               '-m' { $MAKE_TARGETS=$($args[$i+1]); $processed+=2 }
               '-o' { $MAKE_OPTIONS=$args[$i+1]; $processed+=2 }
               '-n' { $INSTALL="no"; $processed++ }
               '-i' { $INSTALL_COMPONENT=$args[$i+1]; $processed+=2 }
            }
        }

        if (test-path install)
        {
            rm -r -Force install >$null
        }
        mkdir -Force build, install >$null

        pushd build

        $SRC_PATH = "$($args[$processed])"
        $processed++

        $_OPTIONS = $($args | select -skip $processed)

        Check-Command {
            cmake $SRC_PATH `
                  -GNinja `
                  -DCMAKE_TOOLCHAIN_FILE="${CMAKE_TOOLCHAIN_FILE}" `
                  -DCMAKE_FIND_ROOT_PATH="${CMAKE_FIND_ROOT_PATH}" `
                  -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" `
                  -DCMAKE_BUILD_WITH_INSTALL_RPATH="ON" `
                  -DCMAKE_PREFIX_PATH="\usr\lib\cmake" `
                  -DCMAKE_INSTALL_SYSCONFDIR="${CMAKE_INSTALL_SYSCONFDIR}" `
                  -DBUILD_SHARED_LIBS="${BUILD_SHARED_LIBS}" `
                  $_OPTIONS
        }

        ninjaParallel -o "${MAKE_OPTIONS}" -t "${MAKE_TARGETS}"

        if ( $INSTALL -eq "yes" )
        {
            $DESTDIR="${PWD}\..\install"
            cmakeInstall INSTALL_COMPONENT
        }

        popd
    }

    function cmakeInstall
    {
        # optional
        [Parameter(Position = 0)]
        [String]$INSTALL_COMPONENT=""

        $DESTDIR="${PWD}\..\install"

        if ( "" -ne $INSTALL_COMPONENT )
        {
            Check-Command { cmake  -DCOMPONENT=$INSTALL_COMPONENT -P cmake_install.cmake }
        }
        else
        {
            Check-Command { cmake -P cmake_install.cmake }
        }
    }

packageScript: |
    $global:_CMAKE_BUILD_PATH="$($args[0])"

    function cmakePackageBin
    {
        installPackageBin "${_CMAKE_BUILD_PATH}\install"
    }

    function cmakePackageDev
    {
        installPackageDev "${_CMAKE_BUILD_PATH}\install"
    }

    function cmakePackageLib
    {
        installPackageLib "${_CMAKE_BUILD_PATH}\install"
    }

    function cmakePackageTgt
    {
        installPackageTgt "${_CMAKE_BUILD_PATH}\install"
    }
