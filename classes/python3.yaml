inherit: [ "pipython3::vars" ]

buildVars: [PYTHON_PYPI_MIRROR]
buildTools: [python3]
buildSetup: |
    $global:PIP_RELATIVE_SEARCH_PATH=""

    ########################################################################################
    #
    # \brief: This function will set the relative search path. Only valid if PYTHON_PYPI_MIRROR is
    #         configured.
    #
    # \args[in]: RELATIVE_SEARCH_PATH relative search path in PYTHON_PYPI_MIRROR
    #
    ########################################################################################
    function pipSetRelativeSearchPath
    {
        Param(
            # mandatory
            [Parameter(Position = 0)]
            [String]$RELATIVE_SEARCH_PATH     
        )
        $global:PIP_RELATIVE_SEARCH_PATH=$RELATIVE_SEARCH_PATH
    }

    ########################################################################################
    #
    # \brief: This function will install a pip package and all its dependencies with or
    #         without external internet access (depends on bob  environment variable 
    #         PYTHON_PYPI_MIRROR and if the releative search path is valid).
    #
    #
    # \args[in]: PIP_PACKAGE pypi package to be installed or path to a local directory
    #
    # \example:
    #     buildScript: |
    #         pipInstall "jinja2==3.1.2"
    #
    # \note: If bob environment variable PYTHON_PYPI_MIRROR is not set or points to
    #        an invalid location, pip will use the external network (pypi.org) to
    #        donwload the required pip package. Furthermore if the required pip package
    #        is not found in PYTHON_PYPI_MIRROR, pip will use external network access
    #        as fallback solution too!
    #
    ########################################################################################
    function pipInstall
    {
        Param(
            # mandatory
            [Parameter(Position = 0)]
            [String]$PIP_PACKAGE      
        )
        
        $LOCAL_PIP_SEARCH_PATH = "${Env:PYTHON_PYPI_MIRROR}\\${global:PIP_RELATIVE_SEARCH_PATH}"

        if(([string]::IsNullOrWhiteSpace(${Env:PYTHON_PYPI_MIRROR})) -Or ( -Not (Test-Path($LOCAL_PIP_SEARCH_PATH))))
        {
            Write-Host "Downlowding pip package ${PIP_PACKAGE} from pypi.org ..."
            $ARGS = ""
        }
        else
        {
            Write-Host "Downlowding pip package ${PIP_PACKAGE} from internal storage ${LOCAL_PIP_SEARCH_PATH} ..."
            # do not search on PyPi, search int the local file system or network instead!
            $ARGS = @("--find-links=${LOCAL_PIP_SEARCH_PATH}", "--no-index")
        }

        $_OPTIONS = $($ARGS | select)

        mkdir -Force -p install/usr/lib >$null
        # add -q for verbosity off
        Check-Command {
            python3 -m pip install $PIP_PACKAGE `
                --root ${PWD}/install `
                --prefix usr `
                --disable-pip-version-check `
                --no-warn-script-location `
                --no-cache-dir `
                --ignore-installed `
                $_OPTIONS
        }

        # append previous installed pip module to python path
        foreach ($i in @("", "lib-dynload", "site-packages"))
        {
            ${Env:PYTHONPATH}=${Env:PYTHONPATH}+"install\$PYTHONDESTLIB"+"\$i;"
        }
    }

    ########################################################################################
    #
    # \brief: This function will install a list of pip packages and all its dependencies
    #         with or  without external internet access (depends on bob 
    #         environment variable PYTHON_PYPI_MIRROR and if the releative search path is valid).
    #
    # \args[in]: REQUIREMENTS_FILE Path to the file containing the required pip packages
    #
    # \example:
    #     buildScript: |
    #        'breathe==4.31.0
    #         mlx.traceability==7.5.0
    #         Sphinx==4.3.0' | Out-File -encoding ASCII ${PWD}\requirements.txt
    #
    #         pipInstallFromFile requirements.txt
    #
    # \note: If bob environment variable PYTHON_PYPI_MIRROR is not set or points to
    #        an invalid location, pip will use the external network (pypi.org) to
    #        download the required pip package. Furthermore if the required pip package
    #        is not found in PYTHON_PYPI_MIRROR, pip will use external network access
    #        as fallback solution too!
    #
    ########################################################################################
    function pipInstallFromFile
    {
        Param(
            # mandatory
            [Parameter(Position = 0)]
            [String]$REQUIREMENTS_FILE
        )

        $LOCAL_PIP_SEARCH_PATH = "${Env:PYTHON_PYPI_MIRROR}\\${global:PIP_RELATIVE_SEARCH_PATH}"

        if(([string]::IsNullOrWhiteSpace(${Env:PYTHON_PYPI_MIRROR})) -Or ( -Not (Test-Path($LOCAL_PIP_SEARCH_PATH))))
        {
            Write-Host "Downlowding pip packages from pypi.org ..."
            $ARGS = ""
        }
        else
        {
            Write-Host "Downlowding pip packages from internal storage ${LOCAL_PIP_SEARCH_PATH} ..."
            # do not search on PyPi, search int the local file system or network instead!
            $ARGS = @("--find-links=${LOCAL_PIP_SEARCH_PATH}", "--no-index")
        }

        $_OPTIONS = $($ARGS | select)

        mkdir -Force -p install/usr/lib >$null
        # add -q for verbosity off
        Check-Command {
            python3 -m pip install -r $REQUIREMENTS_FILE `
                --root ${PWD}/install `
                --prefix usr `
                --disable-pip-version-check `
                --no-warn-script-location `
                --no-cache-dir `
                --ignore-installed `
                $_OPTIONS
        }

        # append previous installed pip module to python path
        foreach ($i in @("", "lib-dynload", "site-packages"))
        {
            ${Env:PYTHONPATH}=${Env:PYTHONPATH}+"install\$PYTHONDESTLIB"+"\$i;"
        }
    }

    ########################################################################################
    #
    # \brief: This function will install a pip package from a local path. All its dependencies 
    #         will be downloaded with or without external internet access (depends on bob 
    #         environment variable PYTHON_PYPI_MIRROR and if the releative search path is valid).
    #
    # \args[in]: PIP_PACKAGE pypi package to be installed or path to a local directory
    # \args[in]: SRC_PATH path to the local source directory of the pip package
    #
    # \example:
    #     buildScript: |
    #         pipInstallFromLocalSource MyPyModule "$MyLocalSourcePath"
    #
    # \note: If bob environment variable PYTHON_PYPI_MIRROR is not set or points to
    #        an invalid location, pip will use the external network (pypi.org) to
    #        donwload the required pip package. Furthermore if the required pip package
    #        is not found in PYTHON_PYPI_MIRROR, pip will use external network access
    #        as fallback solution too!
    #
    #        If you want to search in a specific directory relativ to PYTHON_PYPI_MIRROR you
    #        can call pipSetRelativeSearchPath with the reative search path comapred to 
    #        PYTHON_PYPI_MIRROR.
    #
    #          For example:
    #              buildScript: |
    #                  # search in ${PYTHON_PYPI_MIRROR}/test for all dependencies of MyPyModule
    #                  pipSetRelativeSearchPath test
    #                  pipInstallFromLocalSource MyPyModule "$($args[0])\MyPyModule"
    #
    ########################################################################################
    function pipInstallFromLocalSource
    {
        Param(
            # mandatory
            [Parameter(Position = 0)]
            [String]$PIP_PACKAGE,
            [Parameter(Position = 1)]
            [String]$SRC_PATH          
        )     

        $LOCAL_PIP_SEARCH_PATH = "${Env:PYTHON_PYPI_MIRROR}\\${global:PIP_RELATIVE_SEARCH_PATH}"

        if(([string]::IsNullOrWhiteSpace(${Env:PYTHON_PYPI_MIRROR})) -Or ( -Not (Test-Path($LOCAL_PIP_SEARCH_PATH))))
        {
            Write-Host "Downlowding pip packages from pypi.org ..."
            $ARGS = ""
        }
        else
        {
            Write-Host "Downlowding pip packages from internal storage ${LOCAL_PIP_SEARCH_PATH} ..."
            # do not search on PyPi, search int the local file system or network instead!
            $ARGS = @("--find-links=${LOCAL_PIP_SEARCH_PATH}", "--no-index")
        }

        $_OPTIONS = $($ARGS | select)
        
        # because pip creates a build directory in the sources
        if(Test-Path src)
        {
            rm -Force -r src
        }
        mkdir -Force -p src >$null

        # copy sources but exclude git directory
        robocopy $SRC_PATH src/$PIP_PACKAGE /mir /xd .git >$null

        mkdir -Force -p install/usr/lib >$null
        # add -q for verbosity off
        Check-Command {
            python3 -m pip install src/$PIP_PACKAGE `
                --root ${PWD}/install `
                --prefix usr `
                --disable-pip-version-check `
                --no-warn-script-location `
                --no-cache-dir `
                --ignore-installed `
                $_OPTIONS
        }        

        # append previous installed pip module to python path
        foreach ($i in @("", "lib-dynload", "site-packages"))
        {
            ${Env:PYTHONPATH}=${Env:PYTHONPATH}+"install\$PYTHONDESTLIB"+"\$i;"
        }
    }    

packageSetup: |
    $BUILD_DIR="$($args[0])"
    function installPythonModule
    {
        cp -r -Exclude @("__pycache__/", "*.dist-info/", "*.egg-info") "${BUILD_DIR}/install/*" .
    }