# Common class C/C++ based packages. It updates the various compiler flags
# variables so that the dependencies are found by the toolchains.

buildTools: [target-toolchain]
buildVars: [AUTOCONF_BUILD, AUTOCONF_HOST, CPPFLAGS, CFLAGS, CXXFLAGS, LDFLAGS]
buildScript: |
    # Check if we're officially cross-compiling
    function cpackageCrossCompiling
    {
        if ( "${Env:AUTOCONF_BUILD}" -ne "${Env:AUTOCONF_HOST}" )
        {
            return 1 # cross compiling
        }
        else
        {
            return 0 # native build
        }
    }

    # Get desired library type: "static" or "shared".
    #
    # By default shared libraries are built when cross-compiling and static
    # libraries on host builds.
    function cpackageLibraryType
    {
        if ( cpackageCrossCompiling )
        {
            "shared"
            return
        }
        else
        {
            "static"
            return
        }
    }

    if ( ${Env:AUTOCONF_HOST}.Contains("-windows-msvc") )
    {
        # Setup the visual studio shell environment (similar to the Developer Command Prompt)
        $PS_SCRIPT = "$($BOB_TOOL_PATHS["target-toolchain"])\setup_devenv.ps1"

        & ${PS_SCRIPT} -RootDir $($BOB_TOOL_PATHS["target-toolchain"])

        # The global paths need to be added to $PATH.
        $Env:PATH="$Env:VS_PATH;$Env:PATH"

        # Gather all include and library paths.
        foreach ( $i in ($args | select -skip 1) )
        {
            if( Test-Path "$i/usr/include" )
            {
                ${Env:CPPFLAGS} += " -I$("$i/usr/include")"
            }
            foreach ( $j in @("lib", "usr/lib") )
            {
                if( Test-Path "$i/$j" )
                {
                    # windows: TODO
                    # cygwin: LDFLAGS+=" -LIBPATH:$(cygpath -w "$i/$j")"
                    # linux: LDFLAGS+=" -L$i/$j"; LDFLAGS+=" -Wl,-rpath-link=$i/$j"
                }
            }

        }
    }
