shared: True

environment:
    AUTOCONF_TARGET: "x86_64-pc-windows-msvc"

depends:
    # build the native clang compiler
    - devel::host::clang-native

buildScript: |
    cp -r -Force "$($BOB_DEP_PATHS["devel::host::clang-native"])\*" .

packageScript: |
    cp -r "$($args[0])\*" .

    mkdir -Force -p usr/etc/ide >$null
    pushd usr/etc/ide
    # Create setup file which can be used by an IDE Generator.
    'defines: []
    
    toolchain:
        name: "clang"
        arch: "x86_64"
        cxx:  "usr/bin/clang++.exe"
        cc:   "usr/bin/clang.exe"
        dbg:  "usr/bin/lldb.exe"

    publicHeader:
        - usr\lib\clang\{0}\include
        - usr\include\c++\v1' -f ${Env:PKG_VERSION} | Out-File -encoding ASCII toolchain.cfg
    popd

provideTools:
    host-toolchain:
        path: usr/bin

    target-toolchain:
        path: usr/bin

provideVars:
    # usual compiler variables
    AR:      "llvm-ar"
    AS:      "llvm-as"
    CC:      "clang"
    CPP:     "clang-cpp"
    CXX:     "clang++"
    GDB:     "lldb"
    LD:      "llvm-ld"
    NM:      "llvm-nm"
    OBJCOPY: "llvm-objcopy"
    OBJDUMP: "llvm-objdump"
    RANLIB:  "llvm-ranlib"
    STRIP:   "llvm-strip"
    
    ARCH:   "x86_64"

    # Define our build and host systems because we define the host- and
    # target-toolchain. ARCH is unchanged, though.
    AUTOCONF_BUILD: "$AUTOCONF_TARGET"
    AUTOCONF_HOST:  "$AUTOCONF_TARGET"

    # We build everything static on host builds without debug symbols.
    CPPFLAGS: ""
    CFLAGS: "-Oz -pipe"
    CXXFLAGS: "-Oz -pipe"
    LDFLAGS: "-Xclang -std=c++1z -Xclang -stdlib=libc++"