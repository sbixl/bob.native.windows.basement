# since we can't build gcc native or cross compiling toolchain on windows we must download pre build binaries
checkoutSCM:
    -
        if: !expr |
            "${AUTOCONF_TARGET}" == "arm-none-eabi"
        scm: url
        url: ${DEVELOPER_ARM_MIRROR}/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-win32.zip
        digestSHA256: "90057b8737b888c53ca5aee332f1f73c401d6d3873124d2c2906df4347ebef9e"
        dir: ${AUTOCONF_TARGET}
        extract: no
    -
        if: !expr |
            "${AUTOCONF_TARGET}" == "arm-none-linux-gnueabihf"
        scm: url
        url:  ${DEVELOPER_ARM_MIRROR}/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-mingw-w64-i686-arm-none-linux-gnueabihf.tar.xz
        digestSHA256: "ebad4026aa25127db575b6950ee3b0107cef5a41ddd795663627d1a48b226ff3"
        dir: ${AUTOCONF_TARGET}
        extract: no
    -
        if: !expr |
            "${AUTOCONF_TARGET}" == "aarch64-none-elf"
        scm: url
        url:  ${DEVELOPER_ARM_MIRROR}/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-mingw-w64-i686-aarch64-none-elf.tar.xz
        digestSHA256: "eb28cd18e7e4ca5bf57332ce00da006fb7a841075a117b8c4386c64e1559431a"
        dir: ${AUTOCONF_TARGET}
        extract: no
    -
        if: !expr |
            "${AUTOCONF_TARGET}" == "aarch64-none-linux-gnu"
        scm: url
        url:  ${DEVELOPER_ARM_MIRROR}/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-mingw-w64-i686-aarch64-none-linux-gnu.tar.xz
        digestSHA256: "f35aef3f305290b7bd944fc3269cdf4bd64841c4992db7ef94f2ec7da37df27e"
        dir: ${AUTOCONF_TARGET}
        extract: no

buildVars: [AUTOCONF_TARGET]
buildScript: |
    # create a symlink to avoid wasting memory
    if ( "arm-none-eabi" -eq  ${Env:AUTOCONF_TARGET} )
    {
        $ArchiveName = $(Get-ChildItem "$($args[0])/${Env:AUTOCONF_TARGET}" -File '*.zip')
        New-Item -ItemType SymbolicLink -Path "${Env:AUTOCONF_TARGET}.zip"  -Target "$($args[0])/${Env:AUTOCONF_TARGET}/$ArchiveName" >$null
    }
    else
    {
        $ArchiveName = $(Get-ChildItem "$($args[0])/${Env:AUTOCONF_TARGET}" -File '*.tar.xz')
        New-Item -ItemType SymbolicLink -Path "${Env:AUTOCONF_TARGET}.tar.xz"  -Target "$($args[0])/${Env:AUTOCONF_TARGET}/$ArchiveName" >$null
    }

packageTools: [7z]
packageScript: |
    $ArchivPath = "$($args[0])"
    mkdir usr > $null
    if ( "arm-none-eabi" -eq  ${Env:AUTOCONF_TARGET} )
    {
        Check-Command { 7z x -o"usr" -y $ArchivPath/${Env:AUTOCONF_TARGET}.zip }
    }
    else
    {
        Check-Command { 7z x -y $ArchivPath/${Env:AUTOCONF_TARGET}.tar.xz }
        Check-Command { 7z x -o"usr" -y $PWD/${Env:AUTOCONF_TARGET}.tar }
        rm $PWD/${Env:AUTOCONF_TARGET}.tar
    }
    
    # because 7z has not strip option we need to do it ourselves
    $RootFolder = $(Get-ChildItem usr)
    robocopy usr/$RootFolder/ usr /S /NFL /NDL /NJH /NJS /nc /ns
    rm -Recurse usr/$RootFolder
