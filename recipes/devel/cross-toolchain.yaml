shared: True

buildVars: [AUTOCONF_TARGET]
buildScript: |
    rm -r -Force *
    cp -r "$($args | select -skip 1)/*" .

packageScript: |
    cp -r "$($args[0])/*" .

multiPackage:
    # Keep an unconfigured package that can be tweaked by the consumer. This is
    # available for special use cases.
    "": {}

    gcc:
        depends:
            - name: devel::gcc

        provideTools:
            target-toolchain:
                path: "usr/bin"
                environment:
                    # usual compiler variables
                    AR: "${AUTOCONF_TARGET}-ar"
                    AS: "${AUTOCONF_TARGET}-as"
                    CC: "${AUTOCONF_TARGET}-gcc"
                    CPP: "${AUTOCONF_TARGET}-cpp"
                    CXX: "${AUTOCONF_TARGET}-g++"
                    GDB: "${AUTOCONF_TARGET}-gdb"
                    LD: "${AUTOCONF_TARGET}-ld"
                    NM: "${AUTOCONF_TARGET}-nm"
                    OBJCOPY: "${AUTOCONF_TARGET}-objcopy"
                    OBJDUMP: "${AUTOCONF_TARGET}-objdump"
                    RANLIB: "${AUTOCONF_TARGET}-ranlib"
                    STRIP: "${AUTOCONF_TARGET}-strip"

                    ARCH: "${ARCH}"
                    AUTOCONF_HOST: "${AUTOCONF_TARGET}"
                    CROSS_COMPILE: "${AUTOCONF_TARGET}-"
                    TOOLCHAIN_SYSROOT: "../${AUTOCONF_TARGET}"

                    # CMake dependent
                    CMAKE_TOOLCHAIN_FILE: ..\\..\\${AUTOCONF_TARGET}.toolchain

                    ### common compiler flags

                    # -pipe       - Avoid temporary files, speeding up builds
                    # -Wdate-time - Warn when macros __TIME__, __DATE__ or __TIMESTAMP__ are
                    #               encountered as they might prevent bit-wise-identical reproducible
                    #               compilations.
                    CFLAGS:     "-pipe"
                    CXXFLAGS:   "-Wdate-time -pipe"

                    ### common linker flags

                    # --hash-style=gnu - Use the GNU hash-table format because it is slightly faster.
                    LDFLAGS:    "-Wl,-O1 -Wl,--hash-style=gnu"

        packageVars: [AUTOCONF_TARGET, ARCH]
        # yamllint disable rule:line-length
        packageScript: |

            # get version number
            $version="Unknown"
            $dirList = Get-ChildItem -Path usr\${Env:AUTOCONF_TARGET}\include\c++ -Directory

            if($dirList -is [array])
            {
                Write-Error "Can't determinae version info!"
            }
            else
            {
                $version = $dirList
            }

                # create cmake toolchain file
            '# bare metal system

            # generic system is used for embedded systems (without OS)
            set(CMAKE_SYSTEM_NAME Generic)
            set(CMAKE_SYSTEM_PROCESSOR arm)

            # set compiler
            set(CMAKE_ASM_COMPILER "{0}-gcc.exe")
            set(CMAKE_C_COMPILER "{0}-gcc.exe")
            set(CMAKE_CXX_COMPILER "{0}-g++.exe")

            # compiler check is failing...
            set(CMAKE_C_COMPILER_WORKS 1)
            set(CMAKE_CXX_COMPILER_WORKS 1)

            set(CMAKE_LD_SEARCH_PATH "" CACHE FILEPATH "")

            # programs are from host; libs and headers only from target
            set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
            set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
            set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
            set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

            # do not look into package registries
            set(CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY ON)
            set(CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY ON)

            # specify standard system include directories
            set(CMAKE_ASM_STANDARD_INCLUDE_DIRECTORIES "${{CMAKE_ASM_STANDARD_INCLUDE_DIRECTORIES}} ${{CMAKE_CURRENT_LIST_DIR}}/usr/{0}/include")
            set(CMAKE_C_STANDARD_INCLUDE_DIRECTORIES   "${{CMAKE_C_STANDARD_INCLUDE_DIRECTORIES}}   ${{CMAKE_CURRENT_LIST_DIR}}/usr/{0}/include")
            set(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES "${{CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES}} ${{CMAKE_CURRENT_LIST_DIR}}/usr/{0}/include/c++/{1}")' -f "${Env:AUTOCONF_TARGET}", "${version}" |
            Out-File -encoding utf8 ${PWD}\${Env:AUTOCONF_TARGET}.toolchain

            mkdir -Force -p usr/etc/ide >$null
            pushd usr/etc/ide
            # Create setup file which can be used by an IDE Generator.
            'defines: []

            toolchain:
                name: "{1}"
                arch: "{0}"
                cxx:  "usr/bin/{1}-g++.exe"
                cc:   "usr/bin/{1}-gcc.exe"
                dbg:  "usr/bin/{1}-gdb.exe"

            publicHeader:
                - usr\{1}\include
                - usr\{1}\include\c++\{2}
                - usr\lib\gcc\{1}\{2}\include' -f "${Env:ARCH}", "${Env:AUTOCONF_TARGET}", "${version}" | Out-File -encoding ASCII toolchain.cfg
            popd

        # yamllint enable rule:line-length
        multiPackage:

            # ARMv7 bare metal toolchain
            arm-none-eabi:
                environment:
                    AUTOCONF_TARGET: "arm-none-eabi"
                    ARCH: "arm"

            # ARMv7 Linux CortexA toolchain with hard floating point
            arm-linux-gnueabihf:
                environment:
                    AUTOCONF_TARGET: "arm-none-linux-gnueabihf"
                    ARCH: "arm"
                    GCC_TARGET_ARCH: "armv7-a"
                    GCC_TARGET_FLOAT_ABI: "hard"
                    GCC_TARGET_FPU: "vfpv4"

            # ARMv8-A AArch64 bare metal toolchain
            aarch64-none-eabi:
                environment:
                    AUTOCONF_TARGET: "aarch64-none-elf"
                    ARCH: "arm64"
                    GCC_TARGET_ARCH: "armv8-a"

            # ARMv8-A AArch64 Linux toolchain
            aarch64-linux-gnu:
                environment:
                    AUTOCONF_TARGET: "aarch64-none-linux-gnu"
                    ARCH: "arm64"
                    GCC_TARGET_ARCH: "armv8-a"

    llvm:
        depends:
            - devel::llvm

        multiPackage:
            embedded-toolchain-for-arm:
                environment:
                    ARCH: "arm"

                provideTools:
                    target-toolchain:
                        path: "usr/bin"
                        environment:
                            # usual compiler variables
                            AR: "llvm-ar"
                            AS: "clang"
                            CC: "clang"
                            CPP: "clang-cpp"
                            CXX: "clang++"
                            LD:  "lld-link"
                            NM:  "llvm-nm"
                            OBJCOPY: "llvm-objcopy"
                            OBJDUMP: "llvm-objdump"
                            RANLIB: "llvm-ranlib"
                            STRIP: "llvm-strip"

                            ARCH: "${ARCH}"
                            TOOLCHAIN_SYSROOT: ".."

                            ### common compiler flags

                            # -pipe       - Avoid temporary files, speeding up builds
                            # -Wdate-time - Warn when macros __TIME__, __DATE__ or __TIMESTAMP__ are
                            #               encountered as they might prevent bit-wise-identical reproducible
                            #               compilations.
                            CPPFLAGS:   "-Wdate-time"
                            CFLAGS:     "-pipe"
                            CXXFLAGS:   "-Wdate-time -pipe"

                            ### common linker flags

                            # --hash-style=gnu - Use the GNU hash-table format because it is slightly faster.
                            LDFLAGS:    "-Wl,-O1 -Wl,--hash-style=gnu"
